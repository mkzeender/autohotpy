from typing import Concatenate
from autohotpy.proxies.var_ref import VarRef
from autohotpy.static_typing.classes import Bool, BoolInt
from autohotpy.static_typing.classes.object_ import Object

class Func[**Params, Ret]:
    def __call__(self, *args: Params.args, **_: Params.kwargs) -> Ret: ...
    def Bind[P](self, *params: P) -> BoundFunc[Concatenate[P, ..., Params], Ret]: ...
    def IsByRef(self, index: int = ..., /) -> BoolInt: ...
    def IsOptional(self, index: int = ..., /) -> BoolInt: ...

    Name: str
    IsBuiltIn: Bool
    IsVariadic: Bool
    MinParams: int
    MaxParams: int

class BoundFunc[**Params, Ret](Func[Params, Ret]): ...
class Closure[**Params, Ret](Func[Params, Ret]): ...
class Enumerator[P1, P2](Func[[VarRef[P1], VarRef[P2]], BoolInt]): ...
